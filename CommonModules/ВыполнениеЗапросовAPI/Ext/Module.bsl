
#Область ПрограммныйИнтерфейс

Функция СоздатьПользователяНаСервисе(СтруктураПользователя, Отказ, ТекстОшибки) Экспорт
	
	СтруктураПользователяJSON 	= СформироватьСтрокуJSON(СтруктураПользователя);	
	ТекстЗапроса  				= "/api/users/" + СтруктураПользователяJSON;	
	HTTPОтвет 					= ВыполнитьЗапросКСервису("POST", ТекстЗапроса);
		
	Если HTTPОтвет.КодСостояния = 201 Тогда			
		
		СтруктураОтвета 			= РазобратьСтрокуJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		ЗначениеIDНаСервисе 		= ВернутьПриНаличииСвойствоСтруктуры(СтруктураОтвета, "id");
		
		Если ЯвляетсяЧислом(ЗначениеIDНаСервисе) Тогда			
			ЗначениеIDНаСервисе = Число(ЗначениеIDНаСервисе);
		Иначе
			Отказ 				= Истина;
			ТекстОшибки			= "Возвращенный сервисом Id не является числом - " + ЗначениеIDНаСервисе;
			ЗначениеIDНаСервисе = 0;
		КонецЕсли;
		
	Иначе					
		
		Отказ 				= Истина;
		ТекстОшибки			= "Некорректный код состояния в ответе сервиса - " + HTTPОтвет.КодСостояния;
		ЗначениеIDНаСервисе = 0;			
		
	КонецЕсли;	
	
	Возврат Число(ЗначениеIDНаСервисе);
	
КонецФункции

Процедура ОбновитьПользователяНаСервисе(СтруктураПользователя, ID, Отказ, ТекстОшибки) Экспорт
	
	СтруктураПользователяJSON 	= СформироватьСтрокуJSON(СтруктураПользователя);	
	ТекстЗапроса  				= "/api/users/" + ID + "/" + СтруктураПользователяJSON;	
	HTTPОтвет 					= ВыполнитьЗапросКСервису("PUT",ТекстЗапроса);	
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		
		СтруктураОтвета = РазобратьСтрокуJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Если ВернутьПриНаличииСвойствоСтруктуры(СтруктураОтвета,"updatedAt") = Неопределено Тогда
			ТекстОшибки		= "Сервис не вернул в ответе дату изменения данных";
			Отказ 			= Истина;
		КонецЕсли;
		
	Иначе			
		
		ТекстОшибки		= "Некорректный код состояния в ответе сервиса - " + HTTPОтвет.КодСостояния;
		Отказ 			= Истина;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура УдалитьПользователяНаСервисе(ID, Отказ, ТекстОшибки) Экспорт
	
	ТекстЗапроса  	= "/api/users/" + ID;	
	HTTPОтвет 		= ВыполнитьЗапросКСервису("DELETE", ТекстЗапроса);	
	
	Если НЕ HTTPОтвет.КодСостояния = 204 Тогда		
		ТекстОшибки		= "Некорректный код состояния в ответе сервиса - " + HTTPОтвет.КодСостояния;
		Отказ 			= Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеСервисаПоIDПользователя(ID, ТекстОшибки) Экспорт
	
	ТекстЗапроса 			= "/api/users/" + ID;
	
	HTTPОтвет 				= ВыполнитьЗапросКСервису("GET",ТекстЗапроса);
		
	СтруктураОтвета 		= РазобратьСтрокуJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
		
		ТекстОшибки		= "Некорректный код состояния при запросе данных пользователя - " + HTTPОтвет.КодСостояния;
		Возврат Неопределено;
		
	КонецЕсли;
	
	РеквизитыПользователя 	= ВернутьПриНаличииСвойствоСтруктуры(СтруктураОтвета, "data");
		
	СсылкаНаАватар 			= ВернутьПриНаличииСвойствоСтруктуры(РеквизитыПользователя, "avatar");	
	HTTPОтветАватар 		= ПолучитьДанныеКартинкиПоСсылке(СсылкаНаАватар);
	
	Если НЕ HTTPОтвет.КодСостояния = 200 Тогда
		
		ТекстОшибки		= "Некорректный код состояния при запросе данных аватара - " + HTTPОтвет.КодСостояния;
		Возврат Неопределено;
		
	КонецЕсли;
	
	СкачанныйАватар         = HTTPОтветАватар.ПолучитьТелоКакДвоичныеДанные();
	
	КартинкаАватар			= Новый Картинка(СкачанныйАватар);
	
	СтруктураПользователя   = Новый Структура;
	
	РеквизитыПользователя.Удалить("avatar");
	
	СтруктураПользователя.Вставить("КартинкаАватар" 	   ,КартинкаАватар);
	СтруктураПользователя.Вставить("РеквизитыПользователя" ,РеквизитыПользователя);

	
	Возврат СтруктураПользователя;
	
КонецФункции

#КонецОбласти

#Область СлужибныеФункцииИПроцедуры

Функция ВыполнитьЗапросКСервису(Метод, ТекстЗапроса)
	
	АдресСервераAPI = Константы.АдресСервераApi.Получить();
	
	Если СтрНайти(АдресСервераAPI,"http://") > 0 Тогда
		Порт = 80;
		АдресСервераAPI = СтрЗаменить(АдресСервераAPI, "http://", "");
	ИначеЕсли СтрНайти(АдресСервераAPI,"https://") > 0 Тогда
		Порт = 443;
		АдресСервераAPI = СтрЗаменить(АдресСервераAPI, "https://", "");
	КонецЕсли;
	
	HTTPЗапрос 		= Новый HTTPЗапрос(ТекстЗапроса);	
	HTTPСоединение 	= Новый HTTPСоединение(АдресСервераAPI, Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL(), Ложь);	
	HTTPОтвет 		= HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
	
	Возврат HTTPОтвет;
	
КонецФункции   

Функция ПолучитьДанныеКартинкиПоСсылке(СсылкаНаКартинку)
	
	Если СсылкаНаКартинку = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСервераAPI = Константы.АдресСервераApi.Получить();	
	
	ТекстЗапроса 	= СтрЗаменить(СсылкаНаКартинку, АдресСервераAPI, "");
	
	Возврат ВыполнитьЗапросКСервису("GET", ТекстЗапроса);
	
КонецФункции

Функция РазобратьСтрокуJSON(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	
	Возврат ПрочитатьJSON(ЧтениеJSON);

КонецФункции

Функция СформироватьСтрокуJSON(Структура)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ВернутьПриНаличииСвойствоСтруктуры(Структура, ИмяСвойства)
	
	Если ТипЗнч(Структура) = Тип("Структура") И Структура.Свойство(ИмяСвойства) Тогда	
		Возврат Структура[ИмяСвойства];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ЯвляетсяЧислом(Значение) 
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда		
		Возврат Истина		
	Иначе		
		Если ТипЗнч(Значение) = Тип("Строка") Тогда		
			Если Значение = "" Тогда
				Возврат Ложь;
			КонецЕсли;		
		КонецЕсли;
		
		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции

#КонецОбласти











